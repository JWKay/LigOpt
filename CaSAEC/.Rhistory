Px
Pyz
Pxyz
Pmi
ord
ent(Px)
ent(Pyz)
ent(Pxyz)
ent(Px)
PHxGyz
ord <- c(1, 5, 3, 7, 2, 6, 4, 8)#
#
# Might have zeros ????#
# Computing M[X;(Y,Z)] for given distribution P, in flat format#
#
Pxyz<- c( 0.3750000000000000, 0, 0, 0.1250000000000000, 0.1250000000000000, 0, 0, 0.3750000000000000)#
Pxyz <- array(Pxyz[ord], dim=c(2,2,2))#
#
Pxy  <-  apply(Pxyz, c(1,2), sum)#
Pxz <-  apply(Pxyz, c(1,3), sum)#
Pyz <- apply(Pxyz, c(2,3), sum)#
Px  <- apply(Pxyz, 1, sum)#
Py  <- apply(Pxyz,2,sum)#
Pz  <- apply(Pxyz, 3, sum)#
Pmi <- ent(Px) + ent(flatten(Pyz)) - ent(flatten(Pxyz))#
PxGy <- t(1/Py*t(Pxy))#
PxGz <- t(1/Pz*t(Pxz))#
PxGyz <- array(data=NA, dim=c(2,2,2))#
PxGyz[,,1] <- t(1/Pyz[,1]* t(Pxyz[,,1]))#
PxGyz[,,2] <-  t(1/Pyz[,2]* t(Pxyz[,,2]))#
#
PHx <- ent(Px)#
PHxGz <- Pz[1]* ent(PxGz[,1]) + Pz[2]*ent(PxGz[,2])#
#
PHxGy<- Py[1]* ent(PxGy[,1]) + Py[2]*ent(PxGy[,2])#
#
PHxGyz <- Pyz[1,1]*ent(PxGyz[,,1][,1]) + Pyz[2,1]*ent(PxGyz[,,1][,2]) + Pyz[1,2]*ent(PxGyz[,,2][,1]) + Pyz[2,2]*ent(PxGyz[,,2][,2])#
#
# Mutual informations based on observed distribution P#
#
PIxy <-  PHx - PHxGy#
PIxz <- PHx - PHxGz#
#
PIxyGz <- PHxGz - PHxGyz#
PIxzGy <- PHxGy - PHxGyz#
#
# Shared information#
#
CoP <- ent(Px) - PHxGy - PHxGz + PHxGyz#
# Computing M[X;(Y,Z)] for optimal distribution, in flat format#
#
Qxyz <- c( 0.3749999980709821, 1.929017945379030*10^-9, 1.929017945379030*10^-9, \#
0.1249999980709821, 0.1249999967963516, 3.203648374361379*10^-9, \#
3.203648374361379*10^-9, 0.3749999967963517)#
#
Qxyz <- array(Qxyz[ord], dim=c(2,2,2))#
#
Qxy <- apply(Qxyz, c(1,2), sum)#
Qxz<-apply(Qxyz, c(1,3), sum)#
Qyz <- apply(Qxyz, c(2,3), sum)#
Qx <- apply(Qxyz, 1, sum)#
Qy <- apply(Qxyz,2,sum)#
Qz <- apply(Qxyz, 3, sum)#
#
QxGy <- t(1/Qy*t(Qxy))#
QxGz <- t(1/Qz*t(Qxz))#
QxGyz <- array(data=NA, dim=c(2,2,2))#
QxGyz[,,1] <- t(1/Qyz[,1]* t(Qxyz[,,1]))#
QxGyz[,,2] <-  t(1/Qyz[,2]* t(Qxyz[,,2]))#
#
Qmi <- ent(Qx) + ent(flatten(Qyz)) - ent(flatten(Qxyz))#
#
# Synergy#
#
Syn <- Pmi - Qmi#
# Unique informations#
#
QHxGz <- Qz[1]* ent(QxGz[,1]) + Qz[2]*ent(QxGz[,2])#
#
QHxGy<- Qy[1]* ent(QxGy[,1]) + Qy[2]*ent(QxGy[,2])#
#
QHxGyz <- Qyz[1,1]*ent(QxGyz[,,1][,1]) + Qyz[2,1]*ent(QxGyz[,,1][,2]) + Qyz[1,2]*ent(QxGyz[,,2][,1]) + Qyz[2,2]*ent(QxGyz[,,2][,2])#
#
UnqY <- QHxGz - QHxGyz#
#
UnqZ <- QHxGy - QHxGyz#
#
# Shared information#
#
Shar <- ent(Qx) - QHxGy - QHxGz + QHxGyz#
#
c(Shar, Syn, UnqY, UnqZ)#
c(PIxy, PIxz, PIxyGz, PIxzGy)#
c(Shar + UnqY, Shar+ UnqZ, Syn+UnqY, Syn+UnqZ)#
c(Shar + Syn + UnqY + UnqZ, Pmi)#
#
100*c(Shar, Syn, UnqY, UnqZ)/Pmi
Pxyz<- c( 0.3750000000000000, 0, 0, 0.1250000000000000, 0.1250000000000000, 0, 0, 0.3750000000000000)#
Pxyz <- array(Pxyz[ord], dim=c(2,2,2))#
#
Pxy  <-  apply(Pxyz, c(1,2), sum)#
Pxz <-  apply(Pxyz, c(1,3), sum)#
Pyz <- apply(Pxyz, c(2,3), sum)#
Px  <- apply(Pxyz, 1, sum)#
Py  <- apply(Pxyz,2,sum)#
Pz  <- apply(Pxyz, 3, sum)#
Pmi <- ent(Px) + ent(flatten(Pyz)) - ent(flatten(Pxyz))#
PxGy <- t(1/Py*t(Pxy))#
PxGz <- t(1/Pz*t(Pxz))#
PxGyz <- array(data=NA, dim=c(2,2,2))#
PxGyz[,,1] <- t(1/Pyz[,1]* t(Pxyz[,,1]))#
PxGyz[,,2] <-  t(1/Pyz[,2]* t(Pxyz[,,2]))#
#
PHx <- ent(Px)#
PHxGz <- Pz[1]* ent(PxGz[,1]) + Pz[2]*ent(PxGz[,2])#
#
PHxGy<- Py[1]* ent(PxGy[,1]) + Py[2]*ent(PxGy[,2])#
#
PHxGyz <- Pyz[1,1]*ent(PxGyz[,,1][,1]) + Pyz[2,1]*ent(PxGyz[,,1][,2]) + Pyz[1,2]*ent(PxGyz[,,2][,1]) + Pyz[2,2]*ent(PxGyz[,,2][,2])#
#
# Mutual informations based on observed distribution P#
#
PIxy <-  PHx - PHxGy#
PIxz <- PHx - PHxGz#
#
PIxyGz <- PHxGz - PHxGyz#
PIxzGy <- PHxGy - PHxGyz#
#
# Shared information#
#
CoP <- ent(Px) - PHxGy - PHxGz + PHxGyz#
# Computing M[X;(Y,Z)] for optimal distribution, in flat format#
#
Qxyz <- c( 0.3749999980709821, 1.929017945379030*10^-9, 1.929017945379030*10^-9, 0.1249999980709821, 0.1249999967963516, 3.203648374361379*10^-9, 3.203648374361379*10^-9, 0.3749999967963517)#
#
Qxyz <- array(Qxyz[ord], dim=c(2,2,2))#
#
Qxy <- apply(Qxyz, c(1,2), sum)#
Qxz<-apply(Qxyz, c(1,3), sum)#
Qyz <- apply(Qxyz, c(2,3), sum)#
Qx <- apply(Qxyz, 1, sum)#
Qy <- apply(Qxyz,2,sum)#
Qz <- apply(Qxyz, 3, sum)#
#
QxGy <- t(1/Qy*t(Qxy))#
QxGz <- t(1/Qz*t(Qxz))#
QxGyz <- array(data=NA, dim=c(2,2,2))#
QxGyz[,,1] <- t(1/Qyz[,1]* t(Qxyz[,,1]))#
QxGyz[,,2] <-  t(1/Qyz[,2]* t(Qxyz[,,2]))#
#
Qmi <- ent(Qx) + ent(flatten(Qyz)) - ent(flatten(Qxyz))#
#
# Synergy#
#
Syn <- Pmi - Qmi#
# Unique informations#
#
QHxGz <- Qz[1]* ent(QxGz[,1]) + Qz[2]*ent(QxGz[,2])#
#
QHxGy<- Qy[1]* ent(QxGy[,1]) + Qy[2]*ent(QxGy[,2])#
#
QHxGyz <- Qyz[1,1]*ent(QxGyz[,,1][,1]) + Qyz[2,1]*ent(QxGyz[,,1][,2]) + Qyz[1,2]*ent(QxGyz[,,2][,1]) + Qyz[2,2]*ent(QxGyz[,,2][,2])#
#
UnqY <- QHxGz - QHxGyz#
#
UnqZ <- QHxGy - QHxGyz#
#
# Shared information#
#
Shar <- ent(Qx) - QHxGy - QHxGz + QHxGyz#
#
c(Shar, Syn, UnqY, UnqZ)#
c(PIxy, PIxz, PIxyGz, PIxzGy)#
c(Shar + UnqY, Shar+ UnqZ, Syn+UnqY, Syn+UnqZ)#
c(Shar + Syn + UnqY + UnqZ, Pmi)#
#
100*c(Shar, Syn, UnqY, UnqZ)/Pmi
CoP
Pmi
Qmi
Pyz
Pxy
Pxz
ord <- c(1, 5, 3, 7, 2, 6, 4, 8)#
#
# Might have zeros ????#
# Computing M[X;(Y,Z)] for given distribution P, in flat format#
#
Pxyz<- c( 0.2162991957952407, 0.1661543585558095, 0.08384564144419052, 0.03370080420475935, 0.03370080420475934, 0.08384564144419053, 0.1661543585558095, 0.2162991957952407)#
Pxyz <- array(Pxyz[ord], dim=c(2,2,2))#
#
Pxy  <-  apply(Pxyz, c(1,2), sum)#
Pxz <-  apply(Pxyz, c(1,3), sum)#
Pyz <- apply(Pxyz, c(2,3), sum)#
Px  <- apply(Pxyz, 1, sum)#
Py  <- apply(Pxyz,2,sum)#
Pz  <- apply(Pxyz, 3, sum)#
Pmi <- ent(Px) + ent(flatten(Pyz)) - ent(flatten(Pxyz))#
PxGy <- t(1/Py*t(Pxy))#
PxGz <- t(1/Pz*t(Pxz))#
PxGyz <- array(data=NA, dim=c(2,2,2))#
PxGyz[,,1] <- t(1/Pyz[,1]* t(Pxyz[,,1]))#
PxGyz[,,2] <-  t(1/Pyz[,2]* t(Pxyz[,,2]))#
#
PHx <- ent(Px)#
PHxGz <- Pz[1]* ent(PxGz[,1]) + Pz[2]*ent(PxGz[,2])#
#
PHxGy<- Py[1]* ent(PxGy[,1]) + Py[2]*ent(PxGy[,2])#
#
PHxGyz <- Pyz[1,1]*ent(PxGyz[,,1][,1]) + Pyz[2,1]*ent(PxGyz[,,1][,2]) + Pyz[1,2]*ent(PxGyz[,,2][,1]) + Pyz[2,2]*ent(PxGyz[,,2][,2])#
#
# Mutual informations based on observed distribution P#
#
PIxy <-  PHx - PHxGy#
PIxz <- PHx - PHxGz#
#
PIxyGz <- PHxGz - PHxGyz#
PIxzGy <- PHxGy - PHxGyz#
#
# Shared information#
#
CoP <- ent(Px) - PHxGy - PHxGz + PHxGyz#
# Computing M[X;(Y,Z)] for optimal distribution, in flat format#
#
Qxyz <- c( 0.2636222343149624, 0.1188313200360877, 0.03652260292446879, 0.08102384272448107, 0.08102384272399910, 0.03652260292495077, 0.1188313200365697, 0.2636222343144804)#
#
Qxyz <- array(Qxyz[ord], dim=c(2,2,2))#
#
Qxy <- apply(Qxyz, c(1,2), sum)#
Qxz<-apply(Qxyz, c(1,3), sum)#
Qyz <- apply(Qxyz, c(2,3), sum)#
Qx <- apply(Qxyz, 1, sum)#
Qy <- apply(Qxyz,2,sum)#
Qz <- apply(Qxyz, 3, sum)#
#
QxGy <- t(1/Qy*t(Qxy))#
QxGz <- t(1/Qz*t(Qxz))#
QxGyz <- array(data=NA, dim=c(2,2,2))#
QxGyz[,,1] <- t(1/Qyz[,1]* t(Qxyz[,,1]))#
QxGyz[,,2] <-  t(1/Qyz[,2]* t(Qxyz[,,2]))#
#
Qmi <- ent(Qx) + ent(flatten(Qyz)) - ent(flatten(Qxyz))#
#
# Synergy#
#
Syn <- Pmi - Qmi#
# Unique informations#
#
QHxGz <- Qz[1]* ent(QxGz[,1]) + Qz[2]*ent(QxGz[,2])#
#
QHxGy<- Qy[1]* ent(QxGy[,1]) + Qy[2]*ent(QxGy[,2])#
#
QHxGyz <- Qyz[1,1]*ent(QxGyz[,,1][,1]) + Qyz[2,1]*ent(QxGyz[,,1][,2]) + Qyz[1,2]*ent(QxGyz[,,2][,1]) + Qyz[2,2]*ent(QxGyz[,,2][,2])#
#
UnqY <- QHxGz - QHxGyz#
#
UnqZ <- QHxGy - QHxGyz#
#
# Shared information#
#
Shar <- ent(Qx) - QHxGy - QHxGz + QHxGyz#
#
c(Shar, Syn, UnqY, UnqZ)#
c(PIxy, PIxz, PIxyGz, PIxzGy)#
c(Shar + UnqY, Shar+ UnqZ, Syn+UnqY, Syn+UnqZ)#
c(Shar + Syn + UnqY + UnqZ, Pmi)#
#
100*c(Shar, Syn, UnqY, UnqZ)/Pmi
Pmi
Qmi
CoP
ent
ent(c(1:10)/55)
ent(c(rep(1,10))/10)
log2(10)
Pxyz <- c(0.216229, 0.166154, 0.0838456, 0.0377008, 0.0377008, 0.0838456, 0.166154)
Pxyz
ent(Pxyz)
Pyz <- c(Pxyz[1]+Pxyz[5], Pxyz[2]+Pxyz[6], Pxyz[3]+Pxyz[7], Pxyz[4]+Pxyz[8])
Pyz
Pxyz <- c(Pxyz, 0.216229)
Pxyz
ent(Pxyz)
PxyzTest<-Pxyz
PxyzTest
Pxyz<- c( 0.2162991957952407, 0.1661543585558095, 0.08384564144419052, 0.03370080420475935, 0.03370080420475934, 0.08384564144419053, 0.1661543585558095, 0.2162991957952407)#
Pxyz <- array(Pxyz[ord], dim=c(2,2,2))#
#
Pxy  <-  apply(Pxyz, c(1,2), sum)#
Pxz <-  apply(Pxyz, c(1,3), sum)#
Pyz <- apply(Pxyz, c(2,3), sum)#
Px  <- apply(Pxyz, 1, sum)#
Py  <- apply(Pxyz,2,sum)#
Pz  <- apply(Pxyz, 3, sum)#
Pmi <- ent(Px) + ent(flatten(Pyz)) - ent(flatten(Pxyz))
Pmi
Pxyz
Pyz
ent(flatten(Pxyz))
PxyzTest
ent(PxyzTest)
Pxyz <- PxyzTest
Pyz <- c(Pxyz[1]+Pxyz[5], Pxyz[2]+Pxyz[6], Pxyz[3]+Pxyz[7], Pxyz[4]+Pxyz[8])
Pyz
sum(Pyz)
Pxyz
Pxyzc(0.216299, Pxyz[2:7], 0.216299)
Pxyz <- c(0.216299, Pxyz[2:7], 0.216299)
Pxyz
ent(Pxyz)
Pyz <- c(Pxyz[1]+Pxyz[5], Pxyz[2]+Pxyz[6], Pxyz[3]+Pxyz[7], Pxyz[4]+Pxyz[8])
Pyz
Pxyz<- c(0.216299, 0.166154, 0.0838456, 0.0337008, 0.0337008, 0.0838456, \#
0.166154, 0.216299)
Pxyz <- c(0.216299, 0.166154, 0.0838456, 0.0337008, 0.0337008, 0.0838456, 0.166154, 0.216299)
Pxyz
ent(Pxyz)
Pyz <- c(Pxyz[1]+Pxyz[5], Pxyz[2]+Pxyz[6], Pxyz[3]+Pxyz[7], Pxyz[4]+Pxyz[8])
Pyz
ent(Pyz)
Px<- c(sum(Pxyz[1:4]), sum(Pxyz[5:8]))
Px
ent(Px)
ent(Px) + ent(Pyz) -ent(Pxyz)
Pxy<- c(Pxyz[1]+Pxyz[2], Pxyz[3]+Pxyz[4], Pxyz[5]+Pxyz[6], Pxyz[7]+Pxyz[8])
Pxy
Pxy  <-  apply(Pxyz, c(1,2), sum)
PxyzTest<- Pxyz
Pxyz<- c( 0.2162991957952407, 0.1661543585558095, 0.08384564144419052, 0.03370080420475935, 0.03370080420475934, 0.08384564144419053, 0.1661543585558095, 0.2162991957952407)#
Pxyz <- array(Pxyz[ord], dim=c(2,2,2))#
#
Pxy  <-  apply(Pxyz, c(1,2), sum)#
Pxz <-  apply(Pxyz, c(1,3), sum)#
Pyz <- apply(Pxyz, c(2,3), sum)#
Px  <- apply(Pxyz, 1, sum)#
Py  <- apply(Pxyz,2,sum)#
Pz  <- apply(Pxyz, 3, sum)
Pxyz
Pxy
Pxz
Px
Py
Pz
# above are the code values
Pxy<- c(Pxyz[1]+Pxyz[2], Pxyz[3]+Pxyz[4], Pxyz[5]+Pxyz[6], Pxyz[7]+Pxyz[8])
Pxy
Pxyz<- PxyzTest
Pxy<- c(Pxyz[1]+Pxyz[2], Pxyz[3]+Pxyz[4], Pxyz[5]+Pxyz[6], Pxyz[7]+Pxyz[8])
Pxy
ent(Pxy)
Px<- c(sum([Pxy{1:2]), sum(Pxy[3:4]))
Px<- c(sum([Pxy[1:2]), sum(Pxy[3:4]))
Px<- c(sum(Pxy[1:2]), sum(Pxy[3:4]))
Px
0.02657037*log(2)
ord <- c(1, 5, 3, 7, 2, 6, 4, 8)#
#
# Might have zeros ????#
# Computing M[X;(Y,Z)] for given distribution P, in flat format#
#
Pxyz<- c( 0.1250000000000000, 0, 0.375, 0, 0, 0.125, 0, 0.3750000000000000)#
Pxyz <- array(Pxyz[ord], dim=c(2,2,2))#
#
Pxy  <-  apply(Pxyz, c(1,2), sum)#
Pxz <-  apply(Pxyz, c(1,3), sum)#
Pyz <- apply(Pxyz, c(2,3), sum)#
Px  <- apply(Pxyz, 1, sum)#
Py  <- apply(Pxyz,2,sum)#
Pz  <- apply(Pxyz, 3, sum)#
Pmi <- ent(Px) + ent(flatten(Pyz)) - ent(flatten(Pxyz))#
PxGy <- t(1/Py*t(Pxy))#
PxGz <- t(1/Pz*t(Pxz))#
PxGyz <- array(data=NA, dim=c(2,2,2))#
PxGyz[,,1] <- t(1/Pyz[,1]* t(Pxyz[,,1]))#
PxGyz[,,2] <-  t(1/Pyz[,2]* t(Pxyz[,,2]))#
#
PHx <- ent(Px)#
PHxGz <- Pz[1]* ent(PxGz[,1]) + Pz[2]*ent(PxGz[,2])#
#
PHxGy<- Py[1]* ent(PxGy[,1]) + Py[2]*ent(PxGy[,2])#
#
PHxGyz <- Pyz[1,1]*ent(PxGyz[,,1][,1]) + Pyz[2,1]*ent(PxGyz[,,1][,2]) + Pyz[1,2]*ent(PxGyz[,,2][,1]) + Pyz[2,2]*ent(PxGyz[,,2][,2])#
#
# Mutual informations based on observed distribution P#
#
PIxy <-  PHx - PHxGy#
PIxz <- PHx - PHxGz#
#
PIxyGz <- PHxGz - PHxGyz#
PIxzGy <- PHxGy - PHxGyz#
#
# Shared information#
#
CoP <- ent(Px) - PHxGy - PHxGz + PHxGyz#
# Computing M[X;(Y,Z)] for optimal distribution, in flat format#
#
Qxyz <-  c( 0.1250000000000000, 0, 0.375, 0, 0, 0.125, 0, 0.3750000000000000)#
Qxyz <- array(Qxyz[ord], dim=c(2,2,2))#
#
Qxy <- apply(Qxyz, c(1,2), sum)#
Qxz<-apply(Qxyz, c(1,3), sum)#
Qyz <- apply(Qxyz, c(2,3), sum)#
Qx <- apply(Qxyz, 1, sum)#
Qy <- apply(Qxyz,2,sum)#
Qz <- apply(Qxyz, 3, sum)#
#
QxGy <- t(1/Qy*t(Qxy))#
QxGz <- t(1/Qz*t(Qxz))#
QxGyz <- array(data=NA, dim=c(2,2,2))#
QxGyz[,,1] <- t(1/Qyz[,1]* t(Qxyz[,,1]))#
QxGyz[,,2] <-  t(1/Qyz[,2]* t(Qxyz[,,2]))#
#
Qmi <- ent(Qx) + ent(flatten(Qyz)) - ent(flatten(Qxyz))#
#
# Synergy#
#
Syn <- Pmi - Qmi#
# Unique informations#
#
QHxGz <- Qz[1]* ent(QxGz[,1]) + Qz[2]*ent(QxGz[,2])#
#
QHxGy<- Qy[1]* ent(QxGy[,1]) + Qy[2]*ent(QxGy[,2])#
#
QHxGyz <- Qyz[1,1]*ent(QxGyz[,,1][,1]) + Qyz[2,1]*ent(QxGyz[,,1][,2]) + Qyz[1,2]*ent(QxGyz[,,2][,1]) + Qyz[2,2]*ent(QxGyz[,,2][,2])#
#
UnqY <- QHxGz - QHxGyz#
#
UnqZ <- QHxGy - QHxGyz#
#
# Shared information#
#
Shar <- ent(Qx) - QHxGy - QHxGz + QHxGyz#
#
c(Shar, Syn, UnqY, UnqZ)#
c(PIxy, PIxz, PIxyGz, PIxzGy)#
c(Shar + UnqY, Shar+ UnqZ, Syn+UnqY, Syn+UnqZ)#
c(Shar + Syn + UnqY + UnqZ, Pmi)#
#
100*c(Shar, Syn, UnqY, UnqZ)/Pmi
Pmi
Qmi
1.606924  + 0.8295 + 6. 0783
1.606924 +0.8295 + 6.0783
exp(8.5147)
exp(8.514724)
6.0783 -0.00662
6.0783 - 0.0255
p21
p22
a= 0.000906 + 0.015343*log(50)
1/a
a= -0.01058 + 0.01776*log(50)
1/a
a = -0.01963 + 0.01861*log(50)
1/a
tab5
ben6<-ben[ben$Participant.number == "6",]
tab6 <- with(ben6, table(Response.RESP, Flankers, Target.Type))
tab6
with(ben, table(Response.CRESP, Participant.number))
26/60
27/60
nmes(ben)
names(ben)
ben5<- ben[ben$Condition=="B"&&ben$Participant.number=="5",]
tab5<- with(ben5, table(Response.RESP, Flankers, Target.Type))
tab5
names(ben5)
nrows(ben5)
nrow(ben5)
?logical
a=1
b=2
a=1&&b=2
a==1&&b==2
summary(ben)
ben5
sum(ben$Condition=="B")
sum(ben$Participant.number=="5")
sum(Condition=="B" && ben$Participant.number == "5")
sum(ben$Condition =="B" && Participant.number == "5")
sum(ben$Condition=="B" && ben$Participant.number=="5")
ben[1:20,]
library(xtable)
?sample
tabacc5
?xtable
?table
attributes(tabacc5)
xtable(tabacc5)
tabacc14
55/60
34/60
tabaccG5
tabaccG16
141 + 573 + 572 + 554
e11= 554/1840
xy11=554/1840
x1 =(572+554)/1840
y1=(573+554)/1840
xy11
x1
y1
cv = xy11-x1*y1
vx = x1 - x1*x1
vy = y1 - y1*y1
corr = cv/sqrt(vx*vy)
corr
cv
tabacc1
library(entropy)
?entropy
